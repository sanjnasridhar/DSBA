In [4]:
# Importing all the neccessary modules
import pandas as pd # reading csv file and creating a dataframe
import numpy as np # 
import matplotlib.pyplot as plt # for plotting data from url and trained data
%matplotlib inline   
url = "http://bit.ly/w-data" 
df = pd.read_csv(url)
print("Data taken in")
df.head(10)
Data taken in
Out[4]:
Hours	Scores
0	2.5	21
1	5.1	47
2	3.2	27
3	8.5	75
4	3.5	30
5	1.5	20
6	9.2	88
7	5.5	60
8	8.3	81
9	2.7	25
In [1]:

In [5]:
# Plotting the data in given in 2-D to understand the distribution of data and the relation between hours studied and scores.
df.plot(x = "Hours",y= "Scores" , style = "o")
plt.title("Hours vs percentage")
plt.xlabel("Hours studied")
plt.ylabel("percentage score")
plt.show()

We can clearly see, there is a positive co-relation between number of hours studied and scores obtained
In [7]:
# Selecting the values of data from the dataframe
X = df.iloc[:,:-1].values
Y = df.iloc[:,1].values
In [8]:
# Spliting the data values obtained into training and testing samples:
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.2,random_state = 0)
TRAINING THE MODEL

In [9]:
# Sample data taken for training are trained using Linear Regression model's algorithm.
from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train,Y_train)
print("Trained")
Trained
REGRESSION LINE

In [10]:
# plotting the trained regression model's output using a line equation
line = regressor.coef_*X + regressor.intercept_
plt.scatter(X,Y)
plt.plot(X,line)
plt.show()

MAKING PREDICTION using the trained data, we are predicting the student's score using predict method

In [11]:
y_pred = regressor.predict(X_test)
print(X_test)
df1 = pd.DataFrame({'Actual': Y_test , 'Predicted': y_pred})
df1
[[1.5]
 [3.2]
 [7.4]
 [2.5]
 [5.9]]
Out[11]:
Actual	Predicted
0	20	16.884145
1	27	33.732261
2	69	75.357018
3	30	26.794801
4	62	60.491033
GET THE RESULT DIRECTLY:

In [12]:
# what will the student score , if he studies for any given amount of time can be calculated directly using predict function.
hours = 9.25
own_pred = round(regressor.predict([[9.25]]) [0],2)
print("No of Hours = {}".format(hours))
print("Predicted Score = {}".format(own_pred))
No of Hours = 9.25
Predicted Score = 93.69
In [13]:
from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(Y_test, y_pred))
Mean Absolute Error: 4.183859899002982
